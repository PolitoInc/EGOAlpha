# Generated by Django 4.2.11 on 2024-03-24 01:42

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import ego.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='apiproviders',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('nessus', 'Nessus'), ('google', 'Google'), ('censys', 'Censys'), ('shodan', 'Shodan'), ('burp', 'Burp'), ('yahoo', 'Yahoo'), ('other', 'Other')], default='unknown', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CPEID',
            fields=[
                ('cpeId', models.CharField(max_length=175, primary_key=True, serialize=False)),
                ('CPE', models.CharField(max_length=100)),
                ('service', models.CharField(max_length=75)),
                ('version', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='csv_version',
            fields=[
                ('vectorString', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=7)),
                ('accessVector', models.CharField(max_length=50)),
                ('accessComplexity', models.CharField(max_length=9)),
                ('authentication', models.CharField(max_length=256)),
                ('confidentialityImpact', models.CharField(max_length=10)),
                ('integrityImpact', models.CharField(max_length=10)),
                ('availabilityImpact', models.CharField(max_length=10)),
                ('baseScore', models.CharField(max_length=5)),
                ('baseSeverity', models.CharField(max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groupingProject', models.CharField(default='Ego', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Please provide the groups name example BugCrowd, Hackerone, or WorkPlace</fieldset>', max_length=100)),
                ('nameProject', models.CharField(default='Please name the project.', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Please provide a Covert Name for the project, this will help keep your project a secret from other users.</fieldset>', max_length=100, unique=True)),
                ('nameCustomer', models.CharField(default='Please the customers name.', help_text='<fieldset style="background-color: lightblue;display: inline-block;">The real name of the customer, this is a secret</fieldset>', max_length=100, unique=True)),
                ('URLCustomer', models.CharField(default='Please the customers name.', help_text='<fieldset style="background-color: lightblue;display: inline-block;">The main url for the customer, or the BugBounty url to the customer platform. </fieldset>', max_length=2048)),
                ('dateCreated', models.DateTimeField(auto_now_add=True)),
                ('customDaysUntilNextScan', models.IntegerField(default='30')),
                ('toScanDate', models.DateField(blank=True, null=True)),
                ('endToScanDate', models.DateField(blank=True, null=True)),
                ('lastEgoScan', models.DateField(blank=True, null=True)),
                ('EgoReconScan', models.BooleanField(default='False')),
                ('reconOnly', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Will tell all attack engines to skip this customer.</fieldset>')),
                ('passiveAttack', models.BooleanField(default='False')),
                ('agressiveAttack', models.BooleanField(default='False')),
                ('notes', models.TextField(blank=True, default='Nothing to tell here.')),
                ('OutOfScopeString', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">This is a list of strings is a negative search for scope, so it will make every domain with the string in it be scanned.</fieldset>', max_length=75, null=True)),
                ('urlScope', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=2048), blank=True, default=list, help_text='<fieldset style="background-color: lightblue;display: inline-block;">Must provide a full url example: https://example.com/ </fieldset>', size=None)),
                ('outofscope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, help_text='<fieldset style="background-color: lightblue;display: inline-block;">List of out of scope domains or subdomains not to be included in scans.</fieldset>', size=None)),
                ('domainScope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, help_text='<fieldset style="background-color: lightblue;display: inline-block;">List of in scope domains, example www.example.com, *.example.com, or *.example.*</fieldset>', size=None)),
                ('Ipv4Scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, help_text='<fieldset style="background-color: lightblue;display: inline-block;">Accepts a list of ip address or cidr examples 127.0.0.1, 192.168.0.0/21</fieldset>', size=None)),
                ('Ipv6Scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, help_text='<fieldset style="background-color: lightblue;display: inline-block;">IPV6 example [343f::34::]</fieldset>', size=None)),
                ('FoundTLD', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('FoundASN', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), size=None), blank=True, default=list, size=None)),
                ('skipScan', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Default is false, this will tell the engine\'s to skip this target if an <b>All Customer scan</b> is ran.</fieldset>')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EGOAgent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('hostLocation', models.CharField(blank=True, max_length=256)),
                ('lastConnect', models.DateField(auto_now_add=True)),
                ('callBackTime', models.IntegerField(default='30')),
                ('alive', models.BooleanField(default='False')),
                ('scanning', models.BooleanField(default='False')),
                ('bearer_token', models.CharField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='EgoControl',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ScanProjectByID', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">The uniquic identifier stirng assigned to id Objects.</fieldset>', max_length=75)),
                ('internal_scanner', models.BooleanField(default='False')),
                ('ScanGroupingProject', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">Example BugCrowd, HackerOne, or work. </fieldset>', max_length=75)),
                ('ScanProjectByName', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">The projects code, name. </fieldset>', max_length=75)),
                ('OutOfScope', models.CharField(blank=True, max_length=75, null=True)),
                ('chunk_size', models.IntegerField(default='12', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Define the scan chunksize for the records, keep in mind that a high value may lead to getting detected by the wafs. It will perform a scan in breathe but some wafs are smart and will observe slow paralle hits. A high vlaue may also consume your network cards usage, and prevent internet usage on the system.</fieldset>')),
                ('CoolDown', models.IntegerField(default='2', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Accepts a tuple example (1,34), this will define the range for the timeout between customer scans.</fieldset>')),
                ('CoolDown_Between_Queries', models.IntegerField(default='6', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Accepts a tuple example (1,34), this will define the range for the timeout between customer scans. </fieldset>')),
                ('Port', models.IntegerField(default='9000', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Example 5000</fieldset>')),
                ('HostAddress', models.CharField(default='127.0.0.1', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Please provide the full url including protocol schema example https://google.com, for where the api is hsoted</fieldset>', max_length=256)),
                ('passiveAttack', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Passive scans is not active at this time.</fieldset>')),
                ('agressiveAttack', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Passive scans is not active at this time.</fieldset>')),
                ('portscan_bool', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">agressive scan is not active at this time.</fieldset>')),
                ('versionscan_bool', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Tell the engine to perform a port scan, by default EGO uses a predfined list of ports. this feature will be expanded later to allow customer port ranges.</fieldset>')),
                ('Scan_Scope_bool', models.BooleanField(default='False')),
                ('Scan_IPV_Scope_bool', models.BooleanField(default='False')),
                ('Scan_DomainName_Scope_bool', models.BooleanField(default='False')),
                ('scriptscan_bool', models.BooleanField(default='False')),
                ('BruteForce', models.BooleanField(default='False')),
                ('BruteForce_WL', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('scan_records_censys', models.BooleanField(default='False')),
                ('crtshSearch_bool', models.BooleanField(default='False')),
                ('Update_RecordsCheck', models.BooleanField(default='False')),
                ('LoopCustomersBool', models.BooleanField(default='False')),
                ('Completed', models.BooleanField(default='False')),
                ('Gnaw_Completed', models.BooleanField(default='False')),
                ('failed', models.BooleanField(default='False')),
                ('scan_objects', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='External_Internal_Checklist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('Grouping', models.CharField(default='Ego', max_length=100)),
                ('tool', models.DateField(auto_now_add=True)),
                ('tester', models.CharField(default='Ego', max_length=100)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default='False')),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FindingMatrix',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('found', models.CharField(blank=True, max_length=500)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(blank=True, max_length=500)),
                ('component', models.CharField(blank=True, max_length=500)),
                ('seveiry', models.CharField(blank=True, max_length=500)),
                ('compelxity', models.CharField(blank=True, max_length=500)),
                ('risk', models.CharField(blank=True, max_length=500)),
                ('threat', models.CharField(blank=True, max_length=500)),
                ('locations', models.CharField(blank=True, max_length=500)),
                ('impact', models.CharField(blank=True, max_length=500)),
                ('details', models.TextField(blank=True)),
                ('example_location', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), blank=True, default=list, size=None)),
                ('remediation', models.TextField(blank=True)),
                ('references', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), blank=True, default=list, size=None)),
                ('Images', models.ImageField(blank=True, upload_to='RecordPictures/')),
                ('Files', models.FileField(blank=True, upload_to='Matrix/Files')),
            ],
        ),
        migrations.CreateModel(
            name='FoundVuln',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('DomainName', models.CharField(blank=True, max_length=256)),
                ('creds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, null=True, size=None)),
                ('name', models.CharField(blank=True, max_length=256)),
                ('author', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=125), blank=True, size=None)),
                ('severity', models.CharField(choices=[('info, low, medium, high, critical, unknown', 'All'), ('info', 'Info'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical'), ('unknown', 'Unknown')], default='unknown', max_length=120)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('vulnClass', models.CharField(max_length=256, null=True)),
                ('cvss_metrics', models.CharField(blank=True, max_length=256)),
                ('cvss_score', models.CharField(blank=True, max_length=10)),
                ('cwe_id', models.CharField(blank=True, max_length=256)),
                ('description', models.TextField(blank=True)),
                ('impact', models.TextField(blank=True)),
                ('proof_of_concept', models.TextField(blank=True)),
                ('remediation', models.TextField(blank=True)),
                ('location', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=2048), blank=True, null=True, size=None)),
                ('references', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=2048), blank=True, size=None)),
                ('exploitDB', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=2048), blank=True, size=None)),
                ('addtional_data', models.FileField(blank=True, upload_to='ProofOfConcept')),
                ('Submitted', models.BooleanField(default='False')),
                ('matchers_status', models.CharField(blank=True, max_length=2048)),
                ('match_headers', models.CharField(blank=True, max_length=2048)),
                ('matchedAt_headers', models.CharField(blank=True, max_length=2048)),
                ('match_bodys', models.CharField(blank=True, max_length=2048)),
                ('matchedAt_bodys', models.CharField(blank=True, max_length=2048)),
                ('curl_command', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenantInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('READ', 'Read'), ('WRITE', 'Write')], default='READ', max_length=5)),
                ('invite_code', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MantisControls',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('NucleiScan', models.BooleanField(default='True')),
                ('Ipv_Scan', models.BooleanField(default='False')),
                ('LoopCustomersBool', models.BooleanField(default='False')),
                ('OutOfScope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('ScanProjectByID', models.CharField(blank=True, max_length=75)),
                ('ScanGroupingProject', models.CharField(blank=True, max_length=75)),
                ('ScanProjectByName', models.CharField(blank=True, max_length=75)),
                ('Customer_chunk_size', models.IntegerField(default='7')),
                ('Record_chunk_size', models.IntegerField(default='20')),
                ('Global_CoolDown', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default='2'), blank=True, size=None)),
                ('Global_RateLimit', models.IntegerField(default='6')),
                ('Port', models.IntegerField(default='9000')),
                ('HostAddress', models.CharField(default='127.0.0.1', max_length=256)),
                ('severity', models.CharField(default='info, low, medium, high, critical, unknown', max_length=256)),
                ('Elavate', models.CharField(default='127.0.0.1', max_length=256)),
                ('Mantis_Completed', models.BooleanField(default='False')),
                ('failed', models.BooleanField(default='False')),
                ('scan_objects', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('domainname', models.CharField(blank=True, max_length=256)),
                ('subDomain', models.CharField(blank=True, max_length=256, unique=True)),
                ('dateCreated', models.DateTimeField(auto_now_add=True)),
                ('lastScan', models.DateField(auto_now_add=True)),
                ('skipScan', models.BooleanField(default='False')),
                ('alive', models.BooleanField(default='False')),
                ('nucleiBool', models.BooleanField(default='False')),
                ('ip', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('Ipv6Scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('OpenPorts', models.JSONField(blank=True, default=list)),
                ('CertBool', models.BooleanField(blank=True, default='False')),
                ('CMS', models.CharField(blank=True, max_length=256)),
                ('ASN', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None), default=list, size=None)),
                ('Images', models.ImageField(blank=True, upload_to='RecordPictures')),
                ('customer_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='customerrecords', to='ego.customers')),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TldIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tld', models.CharField(max_length=256, unique=True)),
                ('count', models.IntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='VulnCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=256, unique=True)),
                ('vulnClass', models.CharField(max_length=256, null=True)),
                ('author', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=125), null=True, size=None)),
                ('severity', models.CharField(choices=[('info, low, medium, high, critical, unknown', 'All'), ('info', 'Info'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical'), ('unknown', 'Unknown')], default='unknown', max_length=120)),
                ('cvss_metrics', models.CharField(blank=True, max_length=256)),
                ('cvss_score', models.CharField(blank=True, max_length=10)),
                ('cwe_id', models.CharField(blank=True, max_length=256)),
                ('description', models.TextField(blank=True)),
                ('impact', models.TextField(blank=True)),
                ('proof_of_concept', models.TextField(blank=True)),
                ('remediation', models.TextField(blank=True)),
                ('references', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=2048), blank=True, size=None)),
                ('pictures', models.ImageField(blank=True, upload_to='ProofOfConcept')),
            ],
        ),
        migrations.CreateModel(
            name='WordListGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groupName', models.CharField(max_length=256)),
                ('type', models.CharField(max_length=32)),
                ('description', models.TextField(blank=True, default='It may seem dumb but add some context')),
                ('count', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='WordList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, default='None', max_length=32)),
                ('Value', models.CharField(max_length=2024, unique=True)),
                ('Occurance', models.IntegerField(default=0)),
                ('foundAt', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, size=None)),
                ('WordList', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='WordList', to='ego.wordlistgroup')),
            ],
        ),
        migrations.CreateModel(
            name='whois',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('registrar', models.CharField(blank=True, max_length=254, null=True)),
                ('whois_server', models.CharField(blank=True, max_length=254, null=True)),
                ('referral_url', models.CharField(blank=True, max_length=254, null=True)),
                ('updated_date', models.CharField(blank=True, max_length=254)),
                ('creation_date', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), blank=True, null=True, size=None)),
                ('expiration_date', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), blank=True, null=True, size=None)),
                ('name_servers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, null=True, size=None)),
                ('status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=175), blank=True, null=True, size=None)),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, null=True, size=None)),
                ('dnssec', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, null=True, size=None)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('org', models.CharField(blank=True, max_length=254, null=True)),
                ('address', models.CharField(blank=True, max_length=254, null=True)),
                ('city', models.CharField(blank=True, max_length=254, null=True)),
                ('state', models.CharField(blank=True, max_length=254, null=True)),
                ('registrant_postal_code', models.CharField(blank=True, max_length=254, null=True)),
                ('country', models.CharField(blank=True, max_length=4, null=True)),
                ('map_image', models.ImageField(blank=True, upload_to='./ego/static/images/maps/')),
                ('customer_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_customers', to='ego.customers')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_base32', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('READ', 'Read'), ('WRITE', 'Write')], default='READ', max_length=5)),
                ('email_invite_code', models.CharField(blank=True, max_length=100, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ego.tenant')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_groups', to='ego.TenantInvitation')),
                ('users', models.ManyToManyField(related_name='user_groups', to='ego.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ThreatModeling',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_threat_modeling', to='ego.customers')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('template', models.CharField(max_length=2048, null=True)),
                ('template_url', models.URLField(max_length=2048, null=True)),
                ('template_id', models.CharField(max_length=500, null=True)),
                ('info', models.JSONField(default=list, null=True)),
                ('host', models.CharField(max_length=256, null=True)),
                ('matched_at', models.TextField(blank=True, default='False', null=True)),
                ('matched_line', models.BooleanField(default='False')),
                ('matcher_status', models.BooleanField(default='False')),
                ('timestamp', models.DateTimeField(null=True)),
                ('extracted_results', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), null=True, size=None)),
                ('curl_command', models.TextField(blank=True, null=True)),
                ('Submitted', models.BooleanField(default='False')),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Templates_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='RequestMetaData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('status', models.CharField(max_length=3)),
                ('redirect', models.BooleanField(default='False')),
                ('paths', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('cookies', models.JSONField(blank=True)),
                ('headers', models.JSONField(blank=True)),
                ('backend_headers', models.JSONField(blank=True, default=list)),
                ('FoundObjects', models.JSONField(blank=True, default=list)),
                ('headerValues', models.JSONField(blank=True, default=list)),
                ('htmlValues', models.JSONField(blank=True, default=list)),
                ('rawHTML', models.TextField(blank=True)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='RecRequestMetaData', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='PythonMantis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('Elevate_Vuln', models.CharField(blank=True, max_length=256)),
                ('name', models.CharField(max_length=256, null=True)),
                ('callbackServer', models.CharField(default='http://127.0.0.1', max_length=2048)),
                ('callbackServerKey', models.CharField(blank=True, max_length=2048)),
                ('request_method', models.CharField(blank=True, max_length=7, null=True)),
                ('payloads', models.TextField(blank=True)),
                ('headers', models.JSONField(blank=True, default=dict)),
                ('postData', models.TextField(blank=True)),
                ('ComplexPathPython', models.TextField(blank=True)),
                ('ComplexAttackPython', models.FileField(blank=True, upload_to=ego.models.user_directory_path)),
                ('path', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('creds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, size=None)),
                ('pathDeveloper', models.TextField(blank=True)),
                ('rawRequest', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10240), blank=True, size=None)),
                ('SSL', models.BooleanField(default='False')),
                ('timeout_betweenRequest', models.CharField(blank=True, max_length=10)),
                ('repeatnumb', models.CharField(blank=True, max_length=6)),
                ('redirect', models.BooleanField(default='False')),
                ('matchers_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('matchers_headers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('matchers_bodys', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('matchers_words', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('shodan_query', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('google_dork', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=75), size=None)),
                ('tcpversioning', models.CharField(blank=True, max_length=2048)),
                ('vulnCard_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PythonMantis_record', to='ego.vulncard')),
            ],
        ),
        migrations.CreateModel(
            name='Nuclei',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=500)),
                ('method', models.CharField(blank=True, max_length=20)),
                ('vulnerable', models.URLField(blank=True, max_length=2048)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nucleiRecords_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='Nmap',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=500, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=500)),
                ('port', models.CharField(blank=True, max_length=500)),
                ('protocol', models.CharField(blank=True, max_length=500)),
                ('state', models.CharField(blank=True, max_length=10)),
                ('hostname', models.JSONField(blank=True, default=list)),
                ('macaddress', models.CharField(blank=True, max_length=50)),
                ('reason', models.CharField(blank=True, max_length=500)),
                ('reason_ttl', models.CharField(blank=True, max_length=500)),
                ('service', models.CharField(blank=True, max_length=500)),
                ('cpe', models.CharField(blank=True, max_length=500)),
                ('scripts', models.JSONField(blank=True, default=list)),
                ('conf', models.CharField(blank=True, max_length=500)),
                ('extrainfo', models.CharField(blank=True, max_length=500)),
                ('method', models.CharField(blank=True, max_length=500)),
                ('ostype', models.CharField(blank=True, max_length=500)),
                ('product', models.CharField(blank=True, max_length=500)),
                ('version', models.CharField(blank=True, max_length=500)),
                ('servicefp', models.TextField(blank=True)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Nmaps_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='nist_description',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('CPE', models.CharField(max_length=100)),
                ('service', models.CharField(max_length=75)),
                ('descriptions', models.TextField(unique=True)),
                ('references', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), blank=True, size=None)),
                ('CPEServiceID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CPEService', to='ego.cpeid')),
                ('csv_version_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CsvVersion', to='ego.csv_version')),
                ('nist_record_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Nist_records', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='GnawControl',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('NucleiScan', models.BooleanField(default='True')),
                ('Ipv_Scan', models.BooleanField(default='False')),
                ('LoopCustomersBool', models.BooleanField(default='False')),
                ('OutOfScope', models.CharField(blank=True, max_length=75, null=True)),
                ('ScanProjectByID', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">Please provide the groups name example BugCrowd, Hackerone, or WorkPlace</fieldset>', max_length=75)),
                ('ScanGroupingProject', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">Please provide a Covert Name for the project, this will help keep your project a secret from other users.</fieldset>', max_length=75)),
                ('ScanProjectByName', models.CharField(blank=True, help_text='<fieldset style="background-color: lightblue;display: inline-block;">The real name of the customer, this is a secret</fieldset>', max_length=75)),
                ('Customer_chunk_size', models.IntegerField(default='7', help_text='<fieldset style="background-color: lightblue;display: inline-block;">The main url for the customer, or the BugBounty url to the customer platform. </fieldset>')),
                ('Record_chunk_size', models.IntegerField(default='20', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Default is false, this will tell the engine\'s to skip this target if an <b>All Customer scan</b> is ran.</fieldset>')),
                ('Global_Nuclei_CoolDown', models.IntegerField(blank=True, default='4', null=True)),
                ('Global_Nuclei_RateLimit', models.IntegerField(blank=True, default='', null=True)),
                ('Port', models.IntegerField(default='9000', help_text='<fieldset style="background-color: lightblue;display: inline-block;">The default port number is a dragon ball reference. It is over 9000!</fieldset>')),
                ('HostAddress', models.CharField(default='http://127.0.0.1', help_text='<fieldset style="background-color: lightblue;display: inline-block;">The domain name of the server hosting the API, if the api is ran locally this address would be the default. </fieldset>', max_length=256)),
                ('severity', models.CharField(default='info, low, medium, high, critical, unknown', help_text='<fieldset style="background-color: lightblue;display: inline-block;">please provide, one of the severity options to scan for or use them all. <b>Severity</b>info,</br> low,</br> medium,</br> high,</br> critical,</br> unknown</br></fieldset>', max_length=256)),
                ('Gnaw_Completed', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">Used to scan all customers.</fieldset>')),
                ('failed', models.BooleanField(default='False', help_text='<fieldset style="background-color: lightblue;display: inline-block;">An exception occured.</fieldset>')),
                ('scan_objects', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('egoAgentID', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='egoAgentID', to='ego.egoagent')),
            ],
        ),
        migrations.CreateModel(
            name='GEOCODES',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.CharField(blank=True, max_length=256)),
                ('city', models.CharField(blank=True, max_length=256)),
                ('region', models.CharField(blank=True, max_length=256)),
                ('country', models.CharField(blank=True, max_length=256)),
                ('latitude', models.CharField(blank=True, max_length=256)),
                ('longitude', models.CharField(blank=True, max_length=256)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='GEOCODES', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='FoundVulnDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('DomainName', models.CharField(blank=True, max_length=256)),
                ('location', models.CharField(blank=True, max_length=2048, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('creds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, null=True, size=None)),
                ('pictures', models.ImageField(blank=True, upload_to='ProofOfConcept')),
                ('matchers_status', models.CharField(blank=True, max_length=2048)),
                ('match_headers', models.CharField(blank=True, max_length=2048)),
                ('matchedAt_headers', models.CharField(blank=True, max_length=2048)),
                ('match_bodys', models.CharField(blank=True, max_length=2048)),
                ('matchedAt_bodys', models.CharField(blank=True, max_length=2048)),
                ('curl_command', models.TextField(blank=True)),
                ('FoundVuln_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='VulnDetails', to='ego.foundvuln')),
            ],
        ),
        migrations.AddField(
            model_name='foundvuln',
            name='record_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='foundVuln_record', to='ego.record'),
        ),
        migrations.AddField(
            model_name='foundvuln',
            name='vuln_cardId',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vuln_cardId', to='ego.vulncard'),
        ),
        migrations.CreateModel(
            name='DNSQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('A', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('AAAA', models.CharField(blank=True, max_length=500)),
                ('NS', models.TextField(blank=True)),
                ('CNAME', models.TextField(blank=True)),
                ('r', models.TextField(blank=True)),
                ('MX', models.TextField(blank=True)),
                ('TXT', models.TextField(blank=True)),
                ('ANY', models.TextField(blank=True)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DNSQuery_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='DNSAuthority',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('A', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('AAAA', models.CharField(blank=True, max_length=500)),
                ('NS', models.TextField(blank=True)),
                ('CNAME', models.CharField(blank=True, max_length=2048)),
                ('r', models.CharField(blank=True, max_length=500)),
                ('MX', models.TextField(blank=True)),
                ('TXT', models.TextField(blank=True)),
                ('ANY', models.CharField(blank=True, max_length=500)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DNSAuthority_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dateCreated', models.DateTimeField(auto_now_add=True)),
                ('domainname', models.URLField(max_length=2048)),
                ('username', models.CharField(max_length=256)),
                ('password', models.CharField(max_length=256)),
                ('credential', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='credentials_customers', to='ego.customers')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=32, unique=True)),
                ('countryName', models.TextField(blank=True)),
                ('stateOrProvinceName', models.TextField(blank=True)),
                ('organizationName', models.TextField(blank=True)),
                ('localityName', models.TextField(blank=True)),
                ('subjectAltName', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, size=None)),
                ('OCSP', models.URLField(blank=True, max_length=2048)),
                ('caIssuers', models.URLField(blank=True, max_length=2048)),
                ('crlDistributionPoints', models.URLField(blank=True, max_length=2048)),
                ('PEM', models.TextField(blank=True)),
                ('record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Certificates_record', to='ego.record')),
            ],
        ),
        migrations.CreateModel(
            name='api',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dateCreated', models.DateTimeField(auto_now_add=True)),
                ('lastScan', models.DateField(auto_now_add=True)),
                ('whentouse', models.IntegerField(default='30')),
                ('apiId', models.TextField(blank=True)),
                ('apiKey', models.TextField(blank=True)),
                ('passWord', models.CharField(blank=True, max_length=256)),
                ('userName', models.CharField(blank=True, max_length=256)),
                ('inuse', models.BooleanField(default='False')),
                ('apiproviders_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ApiProviders', to='ego.apiproviders')),
            ],
        ),
    ]
